" NeoBundle {{{
" ------------------------------------------------------------------------------
let s:noplugin     = 0
let s:neobundledir = expand("~/.vim/neobundle.vim")
let s:bundledir    = expand("~/.vim/bundle")

" Functions {{{
" Install Minimum Plugins
function! s:init_neobundle()
  if has("vim_starting")
    execute "set runtimepath+=" . s:neobundledir
  endif
  call neobundle#rc(s:bundledir)
  NeoBundleFetch "Shougo/neobundle.vim"  " Let NeoBundle manage NeoBundle
  NeoBundleLazy "Shougo/unite.vim", { "autoload": { "commands": ["Unite"] }}
  NeoBundle "Shougo/vimproc", {
    \ "build": {
    \   "windows" : "make -f make_mingw32.mak",
    \   "cygwin"  : "make -f make_cygwin.mak",
    \   "mac"     : "make -f make_mac.mak",
    \   "unix"    : "make -f make_unix.mak",
    \ }}
endfunction

" bundled
function! s:bundled(bundle)
  if !isdirectory(s:bundledir)
    return 0
  endif
  if stridx(&runtimepath, s:neobundledir) == -1
    return 0
  endif

  if a:bundle ==# 'neobundle.vim'
    return 1
  else
    return neobundle#is_installed(a:bundle)
  endif
endfunction

" load_source
function! s:load_source(path)
  let path = expand(a:path)
  if filereadable(path)
    execute "source " . path
  endif
endfunction
" }}}

" Install Plugins
if !isdirectory(s:neobundledir) || v:version < 702
  let s:noplugin = 1

elseif isdirectory(s:neobundledir) && !isdirectory(s:bundledir)
  " If Neobundle is present and the plug-in is not installed,
  " I performed in preparation
  call s:init_neobundle()
  filetype plugin indent on       " Required!
  NeoBundleCheck                  " Installation check.

else
  " Shougo plugins {{{
  " -------------------------------------------------
  call s:init_neobundle()
  if has("lua") && ((v:version >= 703 && has("patch885")) || v:version >= 704)
    NeoBundleLazy "Shougo/neocomplete.vim", { "autoload": { "insert": 1 }}
    " Combined with NeoComplCache
    let g:neocomplete#enable_at_startup = 1
  else
    NeoBundleLazy "Shougo/neocomplcache.vim", { "autoload": {"insert": 1 }}
    " Cause is unknown, but NeoComplCacheEnable command is found, so change.
    let g:neocomplcache_enable_at_startup = 1
  endif
  NeoBundleLazy "Shougo/neosnippet.vim", {
    \  "depends"  : ["honza/vim-snippets", "Shougo/neosnippet-snippets"],
    \  "autoload" : { "insert": 1 }
    \ }

  NeoBundleLazy "Shougo/vimfiler", {
    \ "depends"    : ["Shougo/unite.vim"],
    \ "autoload"   : {
    \   "commands" : ["VimFiler", "VimFilerTab", "VimFilerExplorer"],
    \ }}
  NeoBundleLazy "Shougo/vimshell", { "autoload": { "commands": ["VimShell"] }}
  " }}}

  " thinca plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "thinca/vim-quickrun", { "autoload": { "commands": ["Quickrun"] }}
  NeoBundleLazy "thinca/vim-scouter", { "autoload": { "commands": ["Scouter"] }}
  NeoBundle "kashewnuts/vim-ft-rst_header"    " respect thinca/vim-ft-rst_header
  " }}}

  " Python plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "davidhalter/jedi-vim", {
    \  "autoload": {
    \    "insert"    : 1,
    \    "filetypes" : ["python", "python3", "djangohtml", "jinja", "htmljinja"] }}
  NeoBundleLazy "lambdalisue/vim-django-support", {
    \  "autoload": {
    \    "filetypes": ["python", "python3", "djangohtml"] }
    \ }
  NeoBundleLazy "jmcantrell/vim-virtualenv", {
    \  "autoload" : {
    \    "filetypes" : ["python", "python3", "djangohtml", "jinja", "htmljinja"] }}
  NeoBundleLazy "nvie/vim-flake8", {
    \  "autoload": {
    \    "filetypes" : ["python", "python3", "djangohtml", "jinja", "htmljinja"] }}
  " }}}

  " Golang plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "nsf/gocode", { "autoload": { "filetypes": ["go"] }}
  NeoBundleLazy "Blackrush/vim-gocode", { "autoload": { "filetypes": ["go"] }}
  " }}}

  " Git plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "mattn/gist-vim", {
    \ "depends" : ["mattn/webapi-vim"], "autoload": { "commands": ["Gist"] }}
  NeoBundleLazy "gregsexton/gitv", {
    \ "depends" : ["tpope/vim-fugitive"], "autoload": { "commands": ["Gitv"] }}
  " }}}

  " Editting support plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "tpope/vim-surround", {
    \ "autoload" : {
    \   "mappings" : [
    \     ["nx", "<Plug>Dsurround"], ["nx", "<Plug>Csurround"],
    \     ["nx", "<Plug>Ysurround"], ["nx", "<Plug>YSurround"],
    \     ["nx", "<Plug>Yssurround"], ["nx", "<Plug>YSsurround"],
    \     ["nx", "<Plug>YSsurround"], ["vx", "<Plug>VgSurround"],
    \     ["vx", "<Plug>VSurround"]
    \ ]}}
  NeoBundleLazy "vim-scripts/Align", { "autoload": { "commands": ["Align"], }}
  NeoBundleLazy "mrtazz/simplenote.vim", { "autoload": { "commands": ["Simplenote"] }}
  NeoBundleLazy "mattn/emmet-vim", {
    \ "autoload": { "filetypes": ["html", "ruby", "php", "css", "haml", "xml"] }}
  NeoBundleLazy "vim-scripts/SQLUtilities", {
    \ "depends" : ["Align"], "autoload": { "commands": ["SQLUFormatter"] }}
  " }}}

  " Twitter plugins {{{
  " -------------------------------------------------
  NeoBundleLazy "basyura/TweetVim", {
    \ "depends": ["basyura/twibill.vim", "tyru/open-browser.vim", "mattn/webapi-vim",
    \             "h1mesuke/unite-outline", "basyura/bitly.vim", "mattn/favstar-vim"],
    \ "autoload": {
    \   "commands": ["TweetVimHomeTimeline", "TweetVimSay", "TweetVimListStatus", 
    \                "TweetVimSearch"], }}
  " }}}

  " Gmail plugin {{{
  " -------------------------------------------------
  " NeoBundleLazy "yuratomo/gmail.vim", { "autoload": { "commands": ["Gmail"] }}
  NeoBundleLazy "kashewnuts/gmail.vim", { "autoload": { "commands": ["Gmail"] }}
  " }}}


  " Plugins Settings
  " -------------------------------------------------

  " neocomplete.vim {{{
  if s:bundled('neocomplete.vim')
    let g:acp_enableAtStartup = 0            " NeoCompleteEnable
    let g:neocomplete#enable_smart_case = 1  " Use smartcase.

    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " jedi omni completion
    autocmd MyAutoCmd FileType python setlocal omnifunc=jedi#completions

    let g:jedi#auto_vim_configuration = 0
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python = '[^. \t]\.\w*'
    let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\w*'
  endif " }}}

  " neocomplcache.vim {{{
  if s:bundled("neocomplcache.vim")
    let g:acp_enableAtStartup = 0
    let g:neocomplcache_enable_smart_case = 1

    " jedi omni completion
    autocmd MyAutoCmd FileType python setlocal omnifunc=jedi#completions
    let g:jedi#auto_vim_configuration = 0
    if !exists('g:neocomplcache_force_omni_patterns')
      let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'
  endif " }}}

  " neosnippet {{{
  if s:bundled("neosnippet.vim")
    " Plugin key-mappings.
    imap <C-k>   <Plug>(neosnippet_expand_or_jump)
    smap <C-k>   <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>   <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \: "\<TAB>"

    " For snippet_complete marker.
    if has("conceal")
      set conceallevel=2 concealcursor=i
    endif

    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1

    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory=s:bundledir."/vim-snippets/snippets"
  endif " }}}

  " vimfiler {{{
  if s:bundled("vimfiler")
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_safe_mode_by_default = 0
    " close vimfiler automatically when there are only vimfiler open
    nnoremap <Leader>e :VimFilerExplorer<CR>
    autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') |
          \ q | endif
  endif " }}}

  " vim-quickrun {{{
  if s:bundled("vim-quickrun")
    nmap <Leader>r <Plug>(quickrun)
    " Open at the height of 10-digit buffer window by horizontal split at the bottom
    " Enable asynchronous processing
    " Disable the Sheban prevent garbled in a Windows environment
    let g:quickrun_config = {
    \  "_" : {
    \      "outputter/buffer/split" : ":botright 10sp",
    \      "runner" : "vimproc",
    \      "hook/shebang/enable" : 0,
    \  }
    \ }
  endif " }}}

  " jedi-vim {{{
  if s:bundled("jedi-vim")
    let g:jedi#auto_initialization = 0
    let g:jedi#rename_command = "<leader>R"
    let g:jedi#popup_on_dot = 1
    let g:jedi#show_call_signatures = 0
    let g:jedi#popup_select_first = 0
    autocmd MyAutoCmd FileType python let b:did_ftplugin = 1
  endif " }}}

  " vim-flake8 {{{
  if s:bundled("vim-flake8")
    autocmd MyAutoCmd BufWritePost *.py call Flake8()
  endif " }}}

  " Align {{{
  if s:bundled("Align")
    let g:Align_xstrlen = 3       " for japanese string
    let g:DrChipTopLvlMenu = ''   " remove 'DrChip' menu
  endif " }}}

  " simplenote {{{
  if s:bundled("simplenote.vim")
    call s:load_source(expand('~/.simplenoterc'))
  endif " }}}

  " emmet-vim {{{
  if s:bundled("emmet-vim")
  let g:user_emmet_settings = {
  \  "php" : { "extends" : "html", "filters" : "c", },
  \  "xml" : { "extends" : "html", },
  \  "haml": { "extends" : "html", },
  \}
  endif " }}}

  " gmail.vim {{{
  if s:bundled("gmail.vim")
    call s:load_source(expand('~/.anyname'))
  endif " }}}

  filetype plugin indent on       " Required!
  NeoBundleCheck                  " Installation check.
endif " }}}

" vim: expandtab softtabstop=2 shiftwidth=2
