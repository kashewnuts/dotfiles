" Basic Settings {{{
if !1 | finish | endif  " skip if the live Vim is vim-tiny or vim-small
set nocompatible        " Be iMproved

" env
let s:is_windows = has("win16") || has("win32") || has("win64")
let s:is_darwin = has("mac") || has("macunix") || has("gui_macvim")

" Encoding
set encoding=utf-8
scriptencoding utf-8
" }}}

" Misc {{{
syntax on          " Enable syntax highlighting
set number         " Show line number (nonumber: Hide)
set smartindent    " Advanced automatic indentation when you made the new line
set showmatch      " When the brackets is entered closed, to view the matching brackets
set tabstop=4      " Width on the screen of the tab
set softtabstop=4  " Number of spaces in the file space is the corresponding
set noexpandtab    " noexpand tabs to spaces (expandtab: expand)
set shiftwidth=4   " Shift move width
set smarttab       " Indent by the number of 'shiftwidth'.
set history=1000   " history
set matchpairs& matchpairs+=<:>        " To support brackets add a pair of '<' and '>'
set backspace=indent,eol,start         " Can erase everything in the back space
set wildmenu wildmode=list:full        " Command-line completion
set clipboard+=unnamed,autoselect      " Use the OS clipboard
set noswapfile nobackup nowritebackup  " doesn't generate a backup file
set vb t_vb=                           " mute the beep
" Cursor position to prevent misalignment like □ or ○
if exists('&undofile')
  set ambiwidth=double
endif
" Don't make *.un~ files
if exists('&undofile')
  set noundofile
endif
" }}}

" colorscheme
if s:is_windows
  colorscheme louver
else
  colorscheme adrian
endif

" Visualize character {{{
if s:is_windows
  set list listchars=tab:>-,trail:-,extends:>,precedes:<
else
  set imdisable         " When you exit or enter, IME is turned off
  set list listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
endif
" }}}

" KeyMaping {{{
" Adjust the window size to the window time-division. Shift + arrow key.
nnoremap <silent> <S-Left>  :5wincmd <<CR>
nnoremap <silent> <S-Right> :5wincmd ><CR>
nnoremap <silent> <S-Up>    :5wincmd -<CR>
nnoremap <silent> <S-Down>  :5wincmd +<CR>

" When you move in the search results, and in the center of the screen that position.
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Turn off the highlight by pressing twice the ESC.
nmap <silent> <Esc><Esc> :nohlsearch<CR>

" Escape automatically according to the situation question and backslash.
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" Even text wrapping movement by j or k, is modified to act naturally.
nnoremap j gj
nnoremap k gk
" }}}

" Open the file to force the specified character code. {{{
command! Cp932 edit ++enc=cp932
command! Eucjp edit ++enc=euc-jp
command! Iso2022jp edit ++enc=iso-2022-jp
command! Utf8 edit ++enc=utf-8
command! Jis Iso2022jp
command! Sjis Cp932
" }}}

" Display full-width space {{{
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=LightGray guibg=DarkGray
endfunction

if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme * call ZenkakuSpace()
    autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
  augroup END
  call ZenkakuSpace()
endif
" }}}

" vim: expandtab softtabstop=2 shiftwidth=2
