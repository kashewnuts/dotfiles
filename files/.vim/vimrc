" ==========================================================================
" Vim Configuration
"
" Author:   Kashun YOSHIDA
" Platform: Windows, Linux, MacOSX
" NOTE:     To use this, copy to your home directory.
" ==========================================================================

" Basic Settings {{{
" Init {{{
if !1 | finish | endif          " Skip if the live Vim is vim-tiny or vim-small
let s:is_cmd = has('win32') && !has('gui_running')  " For command prompt on Windows
" }}}

" Encoding {{{
let &termencoding = &encoding   " Encoding used for the terminal
set encoding=utf-8              " Sets the character encoding used inside Vim
scriptencoding utf-8            " Specify encoding used in the script
set fileformats=unix,dos,mac    " This gives the end-of-line (<EOL>) formats
" }}}

" Disable {{{
if !has('mac') | set guioptions=M | endif " Disable menu.vim & Use console dialog
set noerrorbells novisualbell t_vb=   " Disable annoying bells
set noswapfile nobackup nowritebackup " Doesn't generate backup files

" Disable defalut plugins
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
" let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_logipat           = 1
let g:loaded_matchparen        = 1
" let g:loaded_netrw             = 1
" let g:loaded_netrwPlugin       = 1
" let g:loaded_netrwSettings     = 1
" let g:loaded_netrwFileHandlers = 1

" Don't read $VIM/(g)vimrc
if has('kaoriya')
  function! s:disable_source(vimrc_local, message) abort
    let l:vimrc_local = expand($VIM . '/' . a:vimrc_local)
    if !filereadable(l:vimrc_local)
      execute ':redir! >' . l:vimrc_local
      silent! echon a:message
      redir END
    endif
  endfunction
  call s:disable_source('vimrc_local.vim',  'let g:vimrc_local_finish = 1')
  call s:disable_source('gvimrc_local.vim', 'let g:gvimrc_local_finish = 1')
endif " }}}
" }}}

" Misc {{{
" Appearance
set ambiwidth=double            " Use twice the width of ASCII characters
set display=lastline            " Enable view long line
set formatoptions& formatoptions+=mMj  " Support Japanese to join lines
set helpheight=999              " Open help to fill the screen
set helplang=ja,en              " Comma separated list of languages.
set history=200                 " History
set list listchars=tab:>-,trail:-  " Visualize character
set scrolloff=5                 " Keep above and below the cursor
set matchpairs& matchpairs+=<:> " To support brackets add a pair of '<' and '>'
set ttimeout timeoutlen=300 ttimeoutlen=50      " Speedup for ESC
set iskeyword& iskeyword+=-     " Include '-' to word
set spelllang=en,cjk

" Edit
set backspace=indent,eol,start  " Can erase everything in the back space
if has('clipboard')
  set clipboard=unnamed,unnamedplus " Use the OS clipboard
endif
set complete& complete+=k       " Specifies how keyword completion
set completeopt=menuone         " Force the user to select one & No preview
set iminsert=0 imsearch=-1      " Insert, Search mode: ime setting
set tags=./tags;                " Refer to projects root tags file

" Indent&Tab
set cindent        " Enables automatic C program indenting.
set tabstop=8      " Width on the screen of the tab
set softtabstop=4  " Number of spaces in the file space is the corresponding
set expandtab      " No expand tabs to spaces (expandtab: expand)
set shiftwidth=4   " Shift move width
set smarttab       " Indent by the number of 'shiftwidth'.

" Search
set hlsearch       " Highlight searches
nohlsearch         " Prevent the highlights when reload
set incsearch      " Do incremental searching
set ignorecase     " Ignore case when searching
set smartcase      " No ignorecase if Uppercase char present

" Command-line
set cmdheight=2                 " Command-line height
set wildmenu wildmode=list:full " Command-line completion

" Statusline
" %F:                             FileName(Relative Pathname)
" %m:                             Fix flag([+] or [-])
" %r:                             Read only flg([RO])
" %h:                             Help buffer
" %w:                             Preview window flag
" %=:                             Separated left & right item
" [%{&ff}]                        FileFormat
" [%{&enc}]                       FileEncording
" [%{strlen(&ft)?&ft:'no\ ft'}]   FileType
" %{printf('%'.(len(line('$'))+2).'d/%d',line('.'),line('$'))}
" %v:                             Virtual column number
" %P:                             Cursor-Now Column/Total Number
set laststatus=2                " Always display status bar
let &statusline="%<%F%m%r%h%w%=[%{&ff}][%{&enc}][%{strlen(&ft)?&ft:'no\ ft'}]"
  \ . "%{printf('%'.(len(line('$'))+2).'d/%d',line('.'),line('$'))}%4v\ %P"
" }}}

" KeyMaping {{{
let g:mapleader = "\<Space>"
" nnoremap <silent> <ESC> <ESC>:nohlsearch<CR>
" Escape automatically according to the situation question and backslash.
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'
" To Enable filtering the command history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
" Adjust the window size to the window time-division. Shift + arrow key.
nnoremap <silent> <S-Left>  :5wincmd <<CR>
nnoremap <silent> <S-Right> :5wincmd ><CR>
nnoremap <silent> <S-Up>    :5wincmd -<CR>
nnoremap <silent> <S-Down>  :5wincmd +<CR>
" Even text wrapping movement by j or k, is modified to act naturally.
nnoremap j gj
nnoremap k gk
" MRU
nnoremap <Leader>e  :<C-u>/ oldfiles<Home>browse filter /
" Like CTRL-], but use ":tjump" instead of ":tag".
nnoremap <C-]> g<C-]>zz
" FizzyFinder
function! PecoOpen() abort  " CLI Only
  let s:searcher = (executable('pt')
    \ ? 'pt --follow -g' . (has('win32') ? ':' : '=') : 'find . -type f')
  let s:fizzyfinder = (finddir('.git', ';') == ''
    \ ? s:searcher : 'git ls-files -co --exclude-standard') . ' | peco'
  for filename in split(system(s:fizzyfinder), '\n')
    execute 'e' filename
  endfor
endfunction
" nnoremap <C-p> : <C-u>call PecoOpen()<CR>
nnoremap <Leader>op  :<C-u>call PecoOpen()<CR>
" Enable Bracketed Paste Mode in vim when using tmux
if has('patch-8.0.0238')
  if &term =~ "screen"
    let &t_BE = "\e[?2004h"
    let &t_BD = "\e[?2004l"
    exec "set t_PS=\e[200~"
    exec "set t_PE=\e[201~"
  endif
else
  if has('patch-8.0.0210')
    set t_BE=
  endif

  if &term =~ "xterm" || &term =~ "screen"
    function! XTermPasteBegin(ret) abort
      set paste
      set pastetoggle=<Esc>[201~
      return a:ret
    endfunction

    let &t_ti .= "\e[?2004h"
    let &t_te .= "\e[?2004l"

    noremap <special> <expr> <Esc>[200~ XTermPasteBegin("0i")
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
    vnoremap <special> <expr> <Esc>[200~ XTermPasteBegin("c")
    cnoremap <special> <Esc>[200~ <nop>
    cnoremap <special> <Esc>[201~ <nop>
  endif
endif
" }}}

" ReOpen Encoding {{{
command! Cp932 edit ++enc=cp932
command! Eucjp edit ++enc=euc-jp
command! Iso2022jp edit ++enc=iso-2022-jp
command! Utf8 edit ++enc=utf-8
command! Jis Iso2022jp
command! Sjis Cp932
" }}}

" Remove end of line white space {{{
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>, <line2>)
function! s:FixWhitespace(line1, line2) abort
  let l:save_cursor = getpos('.')
  silent! execute ':' . a:line1 . ',' . a:line2 . 's/\\\@<!\s\+$//'
  call setpos('.', l:save_cursor)
endfunction " }}}

" AutoCommand {{{
" init augroup (Write the following in order of less than patch 7.4.2103)
augroup MyAutoCmd
  autocmd!
augroup END
autocmd MyAutoCmd QuickFixCmdPost *grep* cwindow " Auto open quickfix-window
autocmd MyAutoCmd InsertLeave * set iminsert=0 imsearch=-1 nopaste " IME off
autocmd MyAutoCmd VimLeave * :silent !clear
" transparency
augroup TransparentBG
  autocmd!
  autocmd Colorscheme * highlight Normal ctermbg=none
  autocmd Colorscheme * highlight NonText ctermbg=none
  autocmd Colorscheme * highlight LineNr ctermbg=none
  autocmd Colorscheme * highlight Folded ctermbg=none
  autocmd Colorscheme * highlight EndOfBuffer ctermbg=none
augroup END
" }}}

" Grep settings {{{
if executable('pt')
  set grepprg=pt    " https://github.com/monochromegane/the_platinum_searcher
  " http://stackoverflow.com/questions/15393301/automatically-sort-quickfix-entries-by-line-text-in-vim
  autocmd MyAutoCmd QuickFixCmdPost * call s:SortQuickfix('s:QfStrCmp')
  function! s:SortQuickfix(fn)
    call setqflist(sort(getqflist(), a:fn))
  endfunction
  function! s:QfStrCmp(e1, e2)
    let [t1, t2] = [bufname(a:e1.bufnr), bufname(a:e2.bufnr)]
    return t1 <? t2 ? -1 : t1 ==? t2 ? 0 : 1
  endfunction
elseif executable('jvgrep')
  let &grepprg = 'jvgrep -iIR ' . (s:is_cmd ? '' : '-8')
elseif executable('grep')
  set grepprg=grep\ -nH
endif " }}}

" v:version >= 704 {{{
if exists('&undofile') | set undofile undodir=$HOME/.cache/tmp | endif
if exists('&breakindent') | set breakindent | endif
if exists('&fixeol') | set nofixeol | endif
" }}}

" Plugins List {{{
" Plugins will be downloaded under the specified directory.
let s:plug_dir = '~/.cache/plugged'
if isdirectory(expand(s:plug_dir))
  call plug#begin(s:plug_dir) " {{{
  " Declare the list of plugins.
  Plug 'ctrlpvim/ctrlp.vim',            {'on': ['CtrlP', 'CtrlPBuffer', 'CtrlPMRUFiles']}
  " Snippets
  Plug 'SirVer/ultisnips',              {'on': [], 'for': 'go'}
  Plug 'honza/vim-snippets',            {'on': []}
  " FileType
  Plug 'othree/html5.vim',              {'for': ['html', 'htmldjango', 'htmljinja']}
  Plug 'fatih/vim-go',                  {'for': 'go', 'do': ':GoInstallBinaries'}
  Plug 'thinca/vim-ft-rst_header',      {'for': 'rst'}
  Plug 'davidhalter/jedi-vim',          {'for': 'python'}
  Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
  Plug 'ekalinin/Dockerfile.vim',       {'for': ['dock*', 'Docker*']}
  " Formater
  Plug 'vim-jp/autofmt'
  Plug 'junegunn/vim-easy-align',       {'on': '<Plug>(EasyAlign)'}
  Plug 'tyru/caw.vim',                  {'on':
    \ ['<Plug>(caw:prefix)', '<Plug>(caw:hatpos:toggle)']}
  Plug 'vim-scripts/SQLUtilities',      {'on': 'SQLUFormatter'}
    \ | Plug 'vim-scripts/Align',       {'on': 'SQLUFormatter'}
  Plug 'vim-scripts/Unicode-RST-Tables',{'for': ['rst', 'md']}
  " Memo
  Plug 'glidenote/memolist.vim',        {'on': ['MemoGrep', 'MemoList', 'MemoNew']}
  " Reference & View
  Plug 'kannokanno/previm',             {'on': 'PrevimOpen'}
  Plug 'tyru/open-browser.vim',         {'on': ['PrevimOpen', '<Plug>(openbrowser-smart-search)']}
  Plug 'vim-jp/vimdoc-ja'
  " Twitter
  Plug 'twitvim/twitvim',               {'on': ['SearchTwitter', 'ListTwitter',
    \ 'PosttoTwitter', 'CPosttoTwitter', 'UserTwitter', 'MentionTwitter']}

  " List ends here. Plugins become visible to Vim after this call.
  call plug#end() " }}}

  " Plugins Config
  " --- ctrlp.vim --- {{{
  nnoremap <C-p> :<C-u>CtrlP<CR>
  nnoremap <silent> <Leader>fb :<C-u>CtrlPBuffer<CR>
  nnoremap <silent> <Leader>fm :<C-u>CtrlPMRUFiles<CR>
  let g:ctrlp_use_caching   = 0  " no cache
  let g:ctrlp_show_hidden   = 1  " Show dotfiles
  let g:ctrlp_key_loop      = 1  " Support multi-byte character
  let g:ctrlp_match_window  = 'bottom,order:btt,min:1,max:10000,results:50'
  let g:ctrlp_custom_ignore = {
    \ 'dir' : '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|swp|zip|gz|jpg|png|gif|pyc)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
  " let g:ctrlp_user_command = 'pt --follow -g='
  let g:ctrlp_user_command = {
    \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
    \ 'fallback': 'pt --follow -g='
    \ }
  " endif
  " }}}

  " --- memolist.vim --- {{{
  let s:memo_path = ((has('win32') || has('mac')) ? ' (個人)' :'')
  let g:memolist_path = '~/Dropbox' . s:memo_path . '/memo'
  let g:memolist_memo_suffix = 'md'
  let g:memolist_template_dir_path = '~/.vim/template/memolist'

  let g:memolist_ex_cmd = 'CtrlP'
  nnoremap <silent> <Leader>ml :MemoList<CR>
  nnoremap <silent> <Leader>mn :MemoNew<CR>
  nnoremap <silent> <Leader>mg :MemoGrep<CR>
  " }}}

  " --- autofmt --- {{{
  set formatexpr=autofmt#japanese#formatexpr()
  let autofmt_allow_over_tw=1
  " }}}

  " --- Align --- {{{
  let g:Align_xstrlen = 3      " for japanese string
  let g:DrChipTopLvlMenu = ''  " remove 'DrChip' menu
  " }}}

  " --- caw.vim --- {{{
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  " }}}

  " --- SQLUtilities --- {{{
  let g:sqlutil_align_comma = 1
  " }}}

  " --- vim-easy-align --- {{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
  " }}}

  " " --- previm --- {{{
  " let g:previm_disable_vimproc = 1
  " let g:previm_show_header = 0
  " command! PrevimRefresh :call previm#refresh()
  " autocmd MyAutoCmd User previm,open-browser.vim doautocmd Previm FileType
  " " }}}

  " --- open-browser --- {{{
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
  " }}}

  " --- twitvim --- {{{
  " Basic
  let twitvim_browser_cmd = (
  \ has('win32') ? 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe' :
  \ has('win32unix') ? '/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe' :
  \ has('mac') ? 'open -a Chrome' :
  \ '')
  let twitvim_force_ssl = 1
  let twitvim_count = 40
  let twitvim_enable_python3 = 1
  let twitvim_allow_multiline = 1
  let twitvim_timestamp_format = '%c'
  let twitvim_show_header = 0
  autocmd MyAutoCmd FileType twitvim setlocal wrap

  " Mapping
  nnoremap <Leader>tp :<C-u>PosttoTwitter<CR>
  nnoremap <Leader>tc :<C-u>CPosttoTwitter<CR>
  nnoremap <Leader>tb :<C-u>BPosttoTwitter<CR>
  nnoremap <Leader>tm :<C-u>MentionsTwitter<CR>
  nnoremap <Leader>tf :<C-u>FriendsTwitter<CR><C-w>j
  nnoremap <Leader>tu :<C-u>UserTwitter<CR><C-w>j
  nnoremap <Leader>tr :<C-u>RepliesTwitter<CR><C-w>j
  nnoremap <Leader>fn :<C-u>NextTwitter<CR>

  " ListTwitter
  command! LTCliming ListTwitter climbing
  command! LTVim ListTwitter vim
  command! LTPython ListTwitter python-su
  command! LTJava ListTwitter Ewigkeit java-ja
  command! LTPyfes ListTwitter takuan_osho pyfes-2010-10
  command! LTBeProud ListTwitter BeProud
  " }}}

  augroup load_insert_snippet_plugins " {{{
    autocmd!
    autocmd InsertEnter * call plug#load(
  \ 'ultisnips',
  \ 'vim-snippets',
  \ )
  \ | autocmd! load_insert_snippet_plugins
  augroup END " }}}
endif "}}}

" Others {{{
" Essential
filetype plugin indent on       " Load plugins according to detected filetype.
syntax on                       " Enable syntax highlight
if !has('gui_running')
  try
    execute 'colorscheme ' . (s:is_cmd ? 'industry' : 'molokai')
  catch
    try | colorscheme desert | catch | endtry
  endtry
endif

" Load local settings
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
" }}}

" vim: tw=78 et sw=2 foldmethod=marker
