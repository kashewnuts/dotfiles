" ==========================================================================
" Vim Configuration
"
" Author:   Kashun YOSHIDA
" Platform: Windows, Linux, MacOSX
" NOTE:     To use this, copy to your home directory.
" ==========================================================================

" Basic Settings {{{
if !1 | finish | endif          " Skip if the live Vim is vim-tiny or vim-small
let s:is_cmd = has('win32') && !has('gui_running')  " For command prompt on Windows

" Encoding {{{
" Sets the character encoding used inside Vim
let &termencoding = &encoding
let &encoding = s:is_cmd ? 'cp932' : 'utf-8'
scriptencoding utf-8            " Specify encoding used in the script
set fileformats=unix,dos,mac    " This gives the end-of-line (<EOL>) formats
" }}}

" Disable {{{
set guioptions=M                      " Disable menu.vim & Use console dialog
set noerrorbells novisualbell t_vb=   " Disable annoying bells
set noswapfile nobackup nowritebackup " Doesn't generate backup files
set noloadplugins

" Don't read $VIM/(g)vimrc
if has('kaoriya')
  function! s:disable_source(vimrc_local, message)
    let l:vimrc_local = expand($VIM . '/' . a:vimrc_local)
    if !filereadable(l:vimrc_local)
      execute ':redir! >' . l:vimrc_local
      silent! echon a:message
      redir END
    endif
  endfunction
  call s:disable_source('vimrc_local.vim',  'let g:vimrc_local_finish = 1')
  call s:disable_source('gvimrc_local.vim', 'let g:gvimrc_local_finish = 1')
endif " }}}
" }}}

" Misc {{{
" Appearance
set ambiwidth=double            " Use twice the width of ASCII characters
set display=lastline            " Enable view long line
set fillchars=vert:\|,fold:\    " Characters to fill the separators
set helpheight=999              " Open help to fill the screen
set history=1000                " History
set list listchars=tab:>-,trail:-  " Visualize character
set number                      " Show line number (nonumber: Hide)
set scrolloff=999               " Keep above and below the cursor
source $VIMRUNTIME/macros/matchit.vim
set showmatch matchtime=1       " The highlight matching brackets
set matchpairs& matchpairs+=<:> " To support brackets add a pair of '<' and '>'

" Edit
set backspace=indent,eol,start  " Can erase everything in the back space
if has('clipboard') | set clipboard=unnamed | endif " Use the OS clipboard
set formatoptions& formatoptions+=mM  " Support Japanese to join lines
set iminsert=0 imsearch=-1      " Insert, Search mode: ime setting

" Indent
set autoindent     " Copy indent from current line when starting a new line
set smartindent    " Do smart autoindenting when starting a new line
set copyindent     " Copy the structure of the existing lines indent

" Tab
set tabstop=8      " Width on the screen of the tab
set softtabstop=4  " Number of spaces in the file space is the corresponding
set expandtab      " No expand tabs to spaces (expandtab: expand)
set shiftwidth=4   " Shift move width
set smarttab       " Indent by the number of 'shiftwidth'.

" Search
set hlsearch       " Highlight searches
nohlsearch         " Prevent the highlights when reload
set incsearch      " Do incremental searching
set ignorecase     " Ignore case when searching
set smartcase      " No ignorecase if Uppercase char present

" Command-line
set cmdheight=2                 " Command-line height
set wildmenu wildmode=list:full " Command-line completion

" Statusline
set laststatus=2                " Always display status bar
set statusline&                 " Init
set statusline+=%F              " FileName(Relative Pathname)
set statusline+=%m              " Fix flag([+] or [-])
set statusline+=%r              " Read only flg([RO])
set statusline+=%h              " Help buffer
set statusline+=%w              " Preview window flag
set statusline+=%=              " Separated left & right item
set statusline+=[%{&ff}]                        " View FileFormat
set statusline+=[%{strlen(&fenc)?&fenc:&enc}]   " FileEncording
set statusline+=[%{strlen(&ft)?&ft:'no\ ft'}]   " FileType
set statusline+=[%l-%c/%L]                      " Cursor-Now Column/Total Number

" Terminal
set timeout timeoutlen=1000 ttimeoutlen=50      " Speedup for ESC
if !has('gui_running')
  set lazyredraw                " Only redraw when necessary.
  set ttyfast                   " Faster redrawing.
endif
" }}}

" KeyMaping {{{
let mapleader = ","
" Turn off the highlight by pressing twice the ESC.
nnoremap <silent> <Esc> <Esc>:nohlsearch<CR>
" Normal mode: IME off
inoremap <silent> <Esc> <Esc>:set iminsert=0<CR>
" Escape automatically according to the situation question and backslash.
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'
" To Enable filtering the command history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
" Adjust the window size to the window time-division. Shift + arrow key.
nnoremap <silent> <S-Left>  :5wincmd <<CR>
nnoremap <silent> <S-Right> :5wincmd ><CR>
nnoremap <silent> <S-Up>    :5wincmd -<CR>
nnoremap <silent> <S-Down>  :5wincmd +<CR>
" Even text wrapping movement by j or k, is modified to act naturally.
nnoremap j gj
nnoremap k gk
" }}}

" Commands {{{
" ReOpen Encoding {{{
command! Cp932 edit ++enc=cp932
command! Eucjp edit ++enc=euc-jp
command! Iso2022jp edit ++enc=iso-2022-jp
command! Utf8 edit ++enc=utf-8
command! Jis Iso2022jp
command! Sjis Cp932
" }}}

" Format JSON
if executable('jq') " {{{
  command! -nargs=? Jq call s:Jq(<f-args>)
  function! s:jq(...)
    execute '%!jq' (a:0 == 0 ? '.' : a:1)
  endfunction
endif " }}}
" }}}

" Grep settings {{{
" init augroup (Write the following in order of less than patch 7.4.2103)
augroup MyAutoCmd
  autocmd!
augroup END
autocmd MyAutoCmd QuickFixCmdPost *grep* cwindow " Auto open quickfix-window

if executable('go') && !executable('jvgrep')
  execute '!go get github.com/mattn/jvgrep'
endif
if executable('jvgrep')
  let &grepprg = s:is_cmd ? 'jvgrep -iIR' : 'jvgrep -8iIR'
endif " }}}

if v:version >= 704 " {{{
  set noundofile  " Don't make *.un~ files
  set nofixeol
  set breakindent
endif " }}}

" dein.vim {{{
let s:plugins_path = '~/.vim/rc/plugins.vim'
if filereadable(expand(s:plugins_path))
  execute 'source' . s:plugins_path
endif " }}}

" Others {{{
" Essential
filetype plugin indent on       " Load plugins according to detected filetype.
syntax on                       " Enable syntax highlight
try
  execute 'colorscheme ' . (s:is_cmd ? 'industry' : 'molokai')
catch
  try | colorscheme desert | catch | endtry
endtry

" Load local settings
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
set secure                      " Safely use Vim
" }}}

" vim: tw=78 et sw=2 foldmethod=marker
