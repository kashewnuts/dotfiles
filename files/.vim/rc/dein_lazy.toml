# Shougo plugins {{{
[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = '''
  let g:unite_enable_auto_select = 0
  let g:unite_enable_start_insert = 1
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "(v:version >= 800 && has('python3')) || has('nvim')"
on_cmd = ['Denite']
hook_add = '''
  nnoremap <silent> ,fm  :<C-u>Denite file_mru<CR>
  nnoremap <silent> ,fr  :<C-u>Denite file_rec<CR>
  nnoremap <silent> ,fl  :<C-u>Denite line<CR>
'''
hook_post_source = '''
  " Change file_rec command.
  call denite#custom#var('file_rec', 'command', ['files'])
  " Change mappings.
  call denite#custom#map('insert', "\<C-j>", 'move_to_next_line')
  call denite#custom#map('insert', "\<C-k>", 'move_to_prev_line')
  " Define alias
  call denite#custom#alias('source', 'file_rec/git', 'file_rec')
  call denite#custom#var('file_rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_source = '''
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
# }}}

# thinca plugins {{{
# [[plugins]]
# repo = 'thinca/vim-quickrun'
# on_cmd = 'Quickrun'
# hook_add = '''
#   nmap <Leader>r <Plug>(quickrun)
#   " Open at the height of 10-digit buffer window by horizontal split at the bottom
#   " Enable asynchronous processing
#   " Disable the Sheban prevent garbled in a Windows environment
#   let g:quickrun_config = {
#   \  '_' : {
#   \      'outputter/buffer/split' : ':botright 10sp',
#   \      'runner' : 'vimproc',
#   \      'hook/shebang/enable' : 0,
#   \  }
#   \ }
# '''

[[plugins]]
repo = 'thinca/vim-ft-rst_header'
on_ft = 'rst'
hook_add = 'let g:rst_header_chars = "#*=-^~""'
hook_source = 'autocmd MyAutoCmd FileType text setl ft=rst'

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = [['n', '<Plug>']]
hook_add = '''
  nmap + <Plug>(fontzoom-larger)
  nmap _ <Plug>(fontzoom-smaller)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
# }}}

# Web plugins {{{
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ruby', 'php', 'css', 'haml', 'xml']
hook_add = '''
  let g:user_emmet_settings = {
  \  'variables' : { 'lang' : 'ja' },
  \  'php' : { 'extends' : 'html', 'filters' : 'c', },
  \  'xml' : { 'extends' : 'html', },
  \  'haml': { 'extends' : 'html', },
  \ }
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_ft = ['html', 'css', 'javascript']
hook_add = '''
  " Switch comment by typing \c
  nmap <Leader>c <Plug>(caw:i:toggle)
  vmap <Leader>c <Plug>(caw:i:toggle)
'''
# }}}

# Git plugins {{{
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = "let g:gista#client#default_username = 'kashewnuts'"

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = 'Agit'
# }}}

# Formater plugins {{{
[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = 'Align'
hook_add = '''
  " for japanese string
  let g:Align_xstrlen = 3
  " remove 'DrChip' menu
  let g:DrChipTopLvlMenu = ''
'''

[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_source = 'Align'
depends = 'Align'
on_cmd = 'SQLUFormatter'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_cmd = 'FixWhitespace'
hook_add = "let g:extra_whitespace_ignored_filetypes = ['unite']"
# }}}

# Reference plugins {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'h'
# }}}

# Edit plugins {{{
# [[plugins]]
# repo = 'mrtazz/simplenote.vim'
# on_cmd = [
#   'SimplenoteDelete', 'SimplenoteList', 'SimplenoteNew', 'SimplenoteOpen',
#   'SimplenotePin', 'SimplenoteTag', 'SimplenoteTrash', 'SimplenoteUnpin',
#   'SimplenoteUpdate', 'SimplenoteVersion', 'SimplenoteVersionInfo'
# ]
# hook_add = '''
#   let g:SimplenoteListHeight=99
#   let g:SimplenoteFiletype ='markdown'
# '''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoGrep', 'MemoList', 'MemoNew']
hook_add = '''
  let g:memolist_path = "~/Dropbox/memo"

  " For unite.vim
  " let g:memolist_unite = 1
  " let g:memolist_unite_option = "-winheight=99"
  " nnoremap <Leader>ml  :MemoList<CR>

  " For denite.nvim
  " let g:memolist_denite = 1
  " let g:memolist_denite_option = "-winheight=99"
  nnoremap <Leader>ml :<C-u>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>

  nnoremap <Leader>mn  :MemoNew<CR>
  nnoremap <Leader>mg  :MemoGrep<CR>
'''
# }}}

# Markup plugins {{{
[[plugins]]
if = "executable('pip')"
repo = 'kannokanno/previm'
on_source = 'open-browser.vim'
depends = 'open-browser.vim'
on_cmd = 'PrevimOpen'
# on_ft = ['md', 'rst']
hook_add = '''
  let g:previm_disable_vimproc = 1
  let g:previm_show_header = 0
  command! PrevimRefresh :call previm#refresh()
'''
build = 'pip install docutils'
# }}}

# FileType plugins {{{
[[plugins]]
repo = 'kashewnuts/vim-scp'
on_ft = 'scp'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}

# Twitter {{{
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'basyura/twibill.vim'
on_source = 'open-browser.vim'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'

[[plugins]]
repo = 'basyura/bitly.vim'

[[plugins]]
repo = 'mattn/favstar-vim'

[[plugins]]
repo = 'basyura/TweetVim'
depends = [
  'unite.vim', 'twibill.vim', 'open-browser.vim',
  'webapi-vim', 'unite-outline', 'bitly.vim', 'favstar-vim',
]
on_cmd = [
  'TweetVimHomeTimeline', 'TweetVimSay', 'TweetVimListStatus',
  'TweetVimSearch', 'TweetVimMentions', 'TweetVimCurrentLineSay'
]
hook_source = '''
  let g:tweetvim_display_time = 1
  let g:tweetvim_async_post = 1
  " let g:tweetvim_display_icon = 1
'''
# }}}

# toml:se fdm=marker:
