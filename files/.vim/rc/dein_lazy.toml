# Shougo plugins {{{
[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = '''
  let g:unite_enable_auto_select = 0
  let g:unite_enable_start_insert = 1

  " Case-insensitive
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1

  nnoremap <silent> ,b  :<C-u>Unite buffer<CR>
  " grep search
  nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  " grep search for the word at the cursor position
  nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  " Recall of grep search results
  nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

  if executable('jvgrep')
    let g:unite_source_grep_command = 'jvgrep'
    let g:unite_source_grep_default_opts = '-8iI --exclude ""\.(git|svn|hg|bzr)""'
    let g:unite_source_grep_recursive_opt = '-R'
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_i = 1
hook_source = '''
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1

  " Set minimum syntax keyword length.
  let g:neocomplete#ources#syntax#in_keyword_length = 3

  " jedi omni completion
  autocmd MyAutoCmd FileType python setl omnifunc=jedi#completions

  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python =
    \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
  " let g:neocomplete#sources#omni#functions.go = 'gocomplete#Complete'
  " let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\w*'

  let g:neocomplete#fources#dictionary#dictionaries = {
    \ 'default':    '',
    \ 'scp':        '~/.vim/dict/scp.dict'
    \ }

  " Enable omni completion.
  autocmd MyAutoCmd FileType css setl omnifunc=csscomplete#CompleteCSS
  autocmd MyAutoCmd FileType html,markdown setl omnifunc=htmlcomplete#CompleteTags
  autocmd MyAutoCmd FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
  autocmd MyAutoCmd FileType xml setl omnifunc=xmlcomplete#CompleteTags
'''

[[plugins]]
repo = 'Shougo/neocomplcache.vim'
on_i = 1
if = "!has('lua')"
hook_source = '''
  " Use neocomplcache.
  let g:neocomplcache#enable_at_startup = 1
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use smartcase.
  let g:neocomplcache_enable_smart_case = 1

  " jedi omni completion
  autocmd MyAutoCmd FileType python setl omnifunc=jedi#completions
  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
  endif
  let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_source = ['neosnippet-snippets', 'context_filetype.vim']
hook_add = '''
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
# }}}

# thinca plugins {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'Quickrun'
hook_add = '''
  nmap <Leader>r <Plug>(quickrun)
  " Open at the height of 10-digit buffer window by horizontal split at the bottom
  " Enable asynchronous processing
  " Disable the Sheban prevent garbled in a Windows environment
  let g:quickrun_config = {
  \  '_' : {
  \      'outputter/buffer/split' : ':botright 10sp',
  \      'runner' : 'vimproc',
  \      'hook/shebang/enable' : 0,
  \  }
  \ }
'''

[[plugins]]
repo = 'thinca/vim-scouter'
on_cmd = 'Scouter'

[[plugins]]
repo = 'thinca/vim-ft-rst_header'
on_ft = 'rst'
hook_add = 'let g:rst_header_chars = "#*=-^~""'
hook_source = 'autocmd MyAutoCmd FileType text setl ft=rst'


[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = [['n', '<Plug>']]
hook_add = '''
  nmap + <Plug>(fontzoom-larger)
  nmap _ <Plug>(fontzoom-smaller)
'''
# }}}

# Web plugins {{{
# [[plugins]]
# repo = 'hail2u/vim-css3-syntax'
# on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

# [[plugins]]
# repo = 'jQuery'
# #on_ft = ['javascript', 'coffeescript', 'typescript']
#
# [[plugins]]
# repo = 'jelera/vim-javascript-syntax'
# #on_ft = ['javascript', 'typescript']
#
# [[plugins]]
# repo = 'jason0x43/vim-js-indent'
# #on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ruby', 'php', 'css', 'haml', 'xml']
hook_add = '''
  let g:user_emmet_settings = {
  \  'variables' : { 'lang' : 'ja' },
  \  'php' : { 'extends' : 'html', 'filters' : 'c', },
  \  'xml' : { 'extends' : 'html', },
  \  'haml': { 'extends' : 'html', },
  \ }
'''
# }}}

# Python plugins {{{
[[plugins]]
if = "executable('pip')"
repo = 'davidhalter/jedi-vim'
on_i = 1
on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
'''
build = 'pip install jedi'

# [[plugins]]
# if = "executable('pip')"
# repo = 'nvie/vim-flake8'
# on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']
# build = 'pip install flake8'
# # hook_add = "autocmd MyAutoCmd BufWritePost *.py call Flake()"

[[plugins]]
if = "executable('pip')"
repo = 'tell-k/vim-autopep8'
on_ft = ['python', 'python3']
build = 'pip install autopep8'

[[plugins]]
if = "executable('virtualenv')"
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']
# }}}

# Syntastic {{{
# [[plugins]]
# repo = 'osyo-manga/shabadou.vim'
#
# [[plugins]]
# repo = 'jceb/vim-hier'
#
# [[plugins]]
# repo = 'dannyob/quickfixstatus'
#
# [[plugins]]
# repo = 'osyo-manga/vim-watchdogs'
# on_cmd = 'WatchdogsRun'
# depends = ['shabadou.vim', 'vim-hier', 'quickfixstatus']
# }}}

# Golang plugins {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
# }}}

# Java plugins {{{
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_source = '''
  autocmd MyAutoCmd FileType java setl omnifunc=javacomplete#Complete
'''
# }}}

# Git plugins {{{
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = "let g:gista#client#default_username = 'kashewnuts'"

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = 'Agit'
# }}}

# Formater plugins {{{
[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = 'Align'
hook_add = '''
  " for japanese string
  let g:Align_xstrlen = 3
  " remove 'DrChip' menu
  let g:DrChipTopLvlMenu = ''
'''

[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_source = 'Align'
depends = 'Align'
on_cmd = 'SQLUFormatter'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_cmd = 'FixWhitespace'
hook_add = "let g:extra_whitespace_ignored_filetypes = ['unite']"
# }}}

# Reference plugins {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'h'
# }}}

# Edit plugins {{{
[[plugins]]
repo = 'mrtazz/simplenote.vim'
on_cmd = [
  'SimplenoteDelete', 'SimplenoteList', 'SimplenoteNew', 'SimplenoteOpen',
  'SimplenotePin', 'SimplenoteTag', 'SimplenoteTrash', 'SimplenoteUnpin', 
  'SimplenoteUpdate', 'SimplenoteVersion', 'SimplenoteVersionInfo'
]
hook_add = '''
  let g:SimplenoteListHeight=50
  let g:SimplenoteFiletype ='markdown'
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_ft = ['html', 'css', 'javascript']
hook_add = '''
  " Switch comment by typing \c
  nmap <Leader>c <Plug>(caw:i:toggle)
  vmap <Leader>c <Plug>(caw:i:toggle)
'''
# }}}

# Markup plugins {{{
[[plugins]]
# repo = 'vim-scripts/RST-Tables'
# repo = 'vim-scripts/RST-Tables-CJK'
repo = 'vim-scripts/Unicode-RST-Tables'
on_ft = 'rst'

[[plugins]]
if = "executable('pip')"
repo = 'kannokanno/previm'
on_source = 'open-browser.vim'
depends = 'open-browser.vim'
on_cmd = 'PrevimOpen'
# on_ft = ['md', 'rst']
hook_add = '''
  let g:previm_disable_vimproc = 1
  let g:previm_show_header = 0
  command! PrevimRefresh :call previm#refresh()
'''
build = 'pip install docutils'
# }}}

# measure plugins {{{
# [[plugins]]
# repo = 'mattn/benchvimrc-vim'
# on_cmd = 'BenchVimrc'
# }}}

# FileType plugins {{{
[[plugins]]
repo = 'kashewnuts/vim-scp'
on_ft = 'scp'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}

# Twitter {{{
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'basyura/twibill.vim'
on_source = 'open-browser.vim'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'

[[plugins]]
repo = 'basyura/bitly.vim'

[[plugins]]
repo = 'mattn/favstar-vim'

[[plugins]]
repo = 'basyura/TweetVim'
depends = [
  'unite.vim', 'twibill.vim', 'open-browser.vim',
  'webapi-vim', 'unite-outline', 'bitly.vim', 'favstar-vim',
]
on_cmd = [
  'TweetVimHomeTimeline', 'TweetVimSay', 'TweetVimListStatus',
  'TweetVimSearch', 'TweetVimMentions', 'TweetVimCurrentLineSay'
]
hook_source = '''
  let g:tweetvim_display_time = 1
  let g:tweetvim_async_post = 1
'''
# }}}

# toml:se fdm=marker:
