#. Shougo plugins {{{
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua')"
on_i = 1
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  let g:acp_enableAtStartup = 0            " NeoCompleteEnable
  let g:neocomplete#enable_smart_case = 1  " Use smartcase.

  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  " jedi omni completion
  au MyAutoCmd FileType python setl omnifunc=jedi#completions

  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python =
    \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
  let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\w*'

  let g:neocomplete#sources#dictionary#dictionaries = {'default': ''}
  " let g:neocomplete#sources#dictionary#dictionaries = {
  "   \ 'default':    '',
  "   \ 'vimshell':   $HOME.'/.vimshell_hist',
  "   \ 'scala':      $HOME.'/.vim/bundle/vim-scala/dict/scala.dict',
  "   \ 'c':          $HOME.'/.vim/dict/c.dict',
  "   \ 'cpp':        $HOME.'/.vim/dict/cpp.dict',
  "   \ 'java':       $HOME.'/.vim/dict/java.dict',
  "   \ 'lua':        $HOME.'/.vim/dict/lua.dict',
  "   \ 'ocaml':      $HOME.'/.vim/dict/ocaml.dict',
  "   \ 'perl':       $HOME.'/.vim/dict/perl.dict',
  "   \ 'php':        $HOME.'/.vim/dict/php.dict',
  "   \ 'scheme':     $HOME.'/.vim/dict/scheme.dict',
  "   \ 'vim':        $HOME.'/.vim/dict/vim.dict'
  "   \ }

  " Enable omni completion.
  au MyAutoCmd FileType css setl omnifunc=csscomplete#CompleteCSS
  au MyAutoCmd FileType html,markdown setl omnifunc=htmlcomplete#CompleteTags
  au MyAutoCmd FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
  au MyAutoCmd FileType xml setl omnifunc=xmlcomplete#CompleteTags
'''

[[plugins]]
repo = 'Shougo/neocomplcache.vim'
on_i = 1
if = "!has('lua')"
hook_source = '''
  let g:neocomplcache#enable_at_startup = 1

  let g:acp_enableAtStartup = 0
  let g:neocomplcache_enable_smart_case = 1

  " jedi omni completion
  au MyAutoCmd FileType python setl omnifunc=jedi#completions
  let g:jedi#auto_vim_configuration = 0
  if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
  endif
  let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'
endif " }}}

if dein#tap('neosnippet.vim') " {{{
  " Plugin key-mappings.
  imap <C-k>   <Plug>(neosnippet_expand_or_jump)
  smap <C-k>   <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>   <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ '\<Plug>(neosnippet_expand_or_jump)'
        \: pumvisible() ? '\<C-n>' : '\<TAB>'
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ '\<Plug>(neosnippet_expand_or_jump)'
        \: '\<TAB>'

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1

  " Tell Neosnippet about the other snippets
  " let g:neosnippet#snippets_directory=dein#tapir.'/vim-snippets/snippets'
'''

[[plugins]]
repo = 'Shougo/unite.vim'

#. [[plugins]]
#. repo = 'Shougo/vimfiler'
#. depends = 'unite.vim'
#. on_map = '<Plug>'
#. on_path = '.*'
#. hook_add = '''
#.   let g:vimfiler_as_default_explorer = 1
#.   let g:vimfiler_safe_mode_by_default = 0
#.   " close vimfiler automatically when there are only vimfiler open
#.   nnoremap <Leader>e :VimFilerExplorer<CR>
#.   au MyAutoCmd BufEnter * if (
#.       \ winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
#. '''
#. }}}

#. thinca plugins {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'Quickrun'
hook_add = '''
  nmap <Leader>r <Plug>(quickrun)
  " Open at the height of 10-digit buffer window by horizontal split at the bottom
  " Enable asynchronous processing
  " Disable the Sheban prevent garbled in a Windows environment
  let g:quickrun_config = {
  \  '_' : {
  \      'outputter/buffer/split' : ':botright 10sp',
  \      'runner' : 'vimproc',
  \      'hook/shebang/enable' : 0,
  \  }
  \ }
'''

[[plugins]]
repo = 'thinca/vim-scouter'
on_cmd = 'Scouter'
#. }}}

#. Web plugins {{{
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['html', 'css', 'javascript', 'jinja', 'htmljinja']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'ruby', 'php', 'css', 'haml', 'xml']
hook_add = '''
  let g:user_emmet_settings = {
  \  'php' : { 'extends' : 'html', 'filters' : 'c', },
  \  'xml' : { 'extends' : 'html', },
  \  'haml': { 'extends' : 'html', },
  \ }
'''
#. }}}

#. Python plugins {{{
repo = 'davidhalter/jedi-vim'
on_i = 1
on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
  let g:jedi#auto_initialization = 0
  let g:jedi#rename_command = '<leader>R'
  let g:jedi#popup_on_dot = 1
  let g:jedi#popup_select_first = 0
  " au MyAutoCmd FileType python let b:did_ftplugin = 1
  " au MyAutoCmd FileType python setl completeopt-=preview " disable docstring
'''
build = 'pip install jedi'

[[plugins]]
repo = 'nvie/vim-flake8'
on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']
build = 'pip install flake8'
#. hook_add = "au MyAutoCmd BufWritePost *.py call Flake()"


[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python', 'python3']
build = 'pip install autopep8'

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3', 'djangohtml', 'jinja', 'htmljinja']

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'python3', 'djangohtml']
#. }}}

#. Syntastic {{{
[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'jceb/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_cmd = 'WatchdogsRun'
depends = ['osyo-manga/shabadou.vim', 'jceb/vim-hier', 'dannyob/quickfixstatus']
#. }}}

#. Golang plugins {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
#. }}}

#. Git plugins {{{
[[plugins]]
repo = 'mattn/gist-vim'
on_cmd = 'Gist'

[[plugins]]
repo = 'gregsexton/gitv'
on_source = 'vim-fugitive'
on_cmd = 'Gitv'
#. }}}

#. Edit plugins {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'h'

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = 'Align'
hook_add = '''
  let g:Align_xstrlen = 3       " for japanese string
  let g:DrChipTopLvlMenu = ''   " remove 'DrChip' menu
'''

[[plugins]]
repo = 'mrtazz/simplenote.vim'
on_cmd = 'Simplenote'
hook_add = '''
  let g:SimplenoteListHeight=50
  let g:SimplenoteFiletype ='rst'
'''

[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_source = 'Align'
depends = 'Align'
on_cmd = 'SQLUFormatter'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_cmd = 'FixWhitespace'
hook_add = "let g:extra_whitespace_ignored_filetypes = ['unite']"
#. }}}

#. FileType plugins {{{
[[plugins]]
repo = 'kashewnuts/vim-scp'
on_ft = 'scp'

[[plugins]]
repo = 'kashewnuts/vim-ft-rst_header'
on_ft = 'rst'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#. }}}

#. Twitter {{{
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'basyura/twibill.vim'
on_source = 'open-browser.vim'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'h1mesuke/unite-outline'
depends = 'unite.vim'

[[plugins]]
repo = 'basyura/bitly.vim'

[[plugins]]
repo = 'mattn/favstar-vim'

[[plugins]]
repo = 'basyura/TweetVim'
depends = [
  'unite.vim',
  'twibill.vim',
  'open-browser.vim',
  'webapi-vim',
  'unite-outline',
  'bitly.vim',
  'favstar-vim',
]
on_cmd = [
  'TweetVimHomeTimeline',
  'TweetVimSay',
  'TweetVimListStatus',
  'TweetVimSearch',
  'TweetVimMentions'
]
hook_add = '''
  let g:tweetvim_display_time = 1
  let g:tweetvim_async_post = 1
'''
#. }}}

#. toml:se fdm=marker:
